{
  "service": {
    "service": "sls-react-frontend-olenairy",
    "serviceObject": {
      "name": "sls-react-frontend-olenairy"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "memorySize": 512,
      "timeout": 6,
      "logRetentionInDays": 7,
      "lambdaHashingVersion": 20201221,
      "apiGateway": {
        "shouldStartNameWithService": true
      },
      "environment": {
        "SERVERLESS_PROJECT": "sls-react-frontend-olenairy",
        "SERVERLESS_REGION": "us-east-1",
        "SERVERLESS_STAGE": "dev",
        "APP_DIST_URL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "DistBucket"
              }
            ]
          ]
        },
        "APP_PUBLIC_URL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "DistBucket"
              }
            ]
          ]
        },
        "APIGATEWAY_URL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com/",
              "dev"
            ]
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ServeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-react-frontend-olenairy-dev-serve",
              "RetentionInDays": 7
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "sls-react-frontend-olenairy",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-react-frontend-olenairy-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-react-frontend-olenairy-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "sls-react-frontend-olenairy",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ServeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls-react-frontend-olenairy/dev/1615553170927-2021-03-12T12:46:10.927Z/sls-react-frontend-olenairy.zip"
              },
              "FunctionName": "sls-react-frontend-olenairy-dev-serve",
              "Handler": "handler.serve",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SERVERLESS_PROJECT": "sls-react-frontend-olenairy",
                  "SERVERLESS_REGION": "us-east-1",
                  "SERVERLESS_STAGE": "dev",
                  "APP_DIST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_DIST_URL\"]"
                  },
                  "APP_PUBLIC_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_PUBLIC_URL\"]"
                  },
                  "APIGATEWAY_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIGATEWAY_URL\"]"
                  }
                }
              }
            },
            "DependsOn": [
              "ServeLogGroup"
            ]
          },
          "ServeLambdaVersionOnA17RFgzLOaQk93xLNHVsxRVJZTvVtlQz7LPem87c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ServeLambdaFunction"
              },
              "CodeSha256": "/ZidQclnsZOHXPV3FW/AmURtZjglEerqC/TiNX13QaQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-sls-react-frontend-olenairy",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1000
            }
          },
          "ApiGatewayResourceAnyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{any+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAnyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ServeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAnyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ServeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1615552992333": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodAnyVarOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodAnyVarAny"
            ]
          },
          "ServeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ServeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DistBucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Delete",
            "Properties": {
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com"
                          ]
                        ]
                      }
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "ServeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ServeLambdaVersionOnA17RFgzLOaQk93xLNHVsxRVJZTvVtlQz7LPem87c"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "ApiGatewayRestApi": {
            "Description": "API Gateway Endpoint",
            "Value": {
              "Ref": "ApiGatewayRestApi"
            }
          },
          "DistBucket": {
            "Description": "Distribution S3 Bucket",
            "Value": {
              "Ref": "DistBucket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "distBucketUrl": {
        "us-east-1": {
          "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_DIST_URL\"]"
        },
        "default": {
          "Fn::Join": [
            "",
            [
              "https://s3-",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com/",
              {
                "Ref": "DistBucket"
              }
            ]
          ]
        }
      },
      "scripts": {
        "hooks": {
          "package:initialize": "npm run build:browser",
          "deploy:finalize": "npx sls s3deploy"
        }
      },
      "webpack": {
        "webpackConfig": "webpack.server.config.js"
      },
      "assets": {
        "auto": false,
        "targets": [
          {
            "bucket": {
              "Ref": "DistBucket"
            },
            "acl": "public-read",
            "files": [
              {
                "source": "public/",
                "globs": [
                  "**/*"
                ]
              },
              {
                "source": "dist/",
                "headers": {
                  "CacheControl": "max-age=31104000"
                },
                "globs": [
                  "**/*.js",
                  "**/*.css",
                  "**/*.map"
                ]
              }
            ]
          }
        ]
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-plugin-scripts",
      "serverless-offline",
      "serverless-s3-deploy"
    ],
    "pluginsData": {},
    "functions": {
      "serve": {
        "handler": "handler.serve",
        "events": [
          {
            "http": {
              "path": "",
              "method": "any",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{any+}",
              "method": "any",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-react-frontend-olenairy-dev-serve",
        "package": {
          "artifact": ".serverless/sls-react-frontend-olenairy.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ServeLambdaVersionOnA17RFgzLOaQk93xLNHVsxRVJZTvVtlQz7LPem87c"
      }
    },
    "resources": {
      "Resources": {
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "MinimumCompressionSize": 1000
          }
        },
        "DistBucket": {
          "Type": "AWS::S3::Bucket",
          "DeletionPolicy": "Delete",
          "Properties": {
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".amazonaws.com"
                        ]
                      ]
                    }
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ApiGatewayRestApi": {
          "Description": "API Gateway Endpoint",
          "Value": {
            "Ref": "ApiGatewayRestApi"
          }
        },
        "DistBucket": {
          "Description": "Distribution S3 Bucket",
          "Value": {
            "Ref": "DistBucket"
          }
        }
      }
    },
    "configValidationMode": "off",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": "sls-react-frontend-olenairy",
      "configValidationMode": "off",
      "provider": {
        "name": "aws",
        "runtime": "nodejs12.x",
        "region": "us-east-1",
        "stage": "dev",
        "memorySize": 512,
        "timeout": 6,
        "logRetentionInDays": 7,
        "lambdaHashingVersion": 20201221,
        "apiGateway": {
          "shouldStartNameWithService": true
        },
        "environment": {
          "SERVERLESS_PROJECT": "sls-react-frontend-olenairy",
          "SERVERLESS_REGION": "us-east-1",
          "SERVERLESS_STAGE": "dev",
          "APP_DIST_URL": {
            "Fn::Join": [
              "",
              [
                "https://s3.amazonaws.com/",
                {
                  "Ref": "DistBucket"
                }
              ]
            ]
          },
          "APP_PUBLIC_URL": {
            "Fn::Join": [
              "",
              [
                "https://s3.amazonaws.com/",
                {
                  "Ref": "DistBucket"
                }
              ]
            ]
          },
          "APIGATEWAY_URL": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com/",
                "dev"
              ]
            ]
          }
        }
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/sls-react-frontend-olenairy/dev/1615553170927-2021-03-12T12:46:10.927Z",
    "artifact": ""
  }
}